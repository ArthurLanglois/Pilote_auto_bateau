CCS PCM C Compiler, Version 3.190, 23745

               Filename: main.LST

               ROM used: 971 (95%)
                         Largest free fragment is 971
               RAM used: 38 (59%) at main() level
                         48 (75%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   040
0003:  NOP
0004:  BTFSC  03.5
0005:  GOTO   00A
0006:  MOVWF  25
0007:  SWAPF  03,W
0008:  MOVWF  26
0009:  GOTO   00F
000A:  BCF    03.5
000B:  MOVWF  25
000C:  SWAPF  03,W
000D:  MOVWF  26
000E:  BSF    26.1
000F:  MOVF   0A,W
0010:  MOVWF  2D
0011:  CLRF   0A
0012:  BCF    03.7
0013:  SWAPF  25,F
0014:  MOVF   04,W
0015:  MOVWF  27
0016:  MOVF   20,W
0017:  MOVWF  28
0018:  MOVF   21,W
0019:  MOVWF  29
001A:  MOVF   22,W
001B:  MOVWF  2A
001C:  MOVF   23,W
001D:  MOVWF  2B
001E:  MOVF   24,W
001F:  MOVWF  2C
0020:  BCF    03.5
0021:  BTFSS  0B.4
0022:  GOTO   025
0023:  BTFSC  0B.1
0024:  GOTO   0B0
0025:  MOVLW  8C
0026:  MOVWF  04
0027:  BTFSS  00.0
0028:  GOTO   02B
0029:  BTFSC  0C.0
002A:  GOTO   0DD
002B:  MOVF   27,W
002C:  MOVWF  04
002D:  MOVF   28,W
002E:  MOVWF  20
002F:  MOVF   29,W
0030:  MOVWF  21
0031:  MOVF   2A,W
0032:  MOVWF  22
0033:  MOVF   2B,W
0034:  MOVWF  23
0035:  MOVF   2C,W
0036:  MOVWF  24
0037:  MOVF   2D,W
0038:  MOVWF  0A
0039:  SWAPF  26,W
003A:  MOVWF  03
003B:  BCF    03.5
003C:  SWAPF  25,W
003D:  BTFSC  26.1
003E:  BSF    03.5
003F:  RETFIE
0040:  CALL   3FF
0041:  BSF    03.5
0042:  MOVWF  10
0043:  MOVLW  00
0044:  MOVWF  0A
0045:  GOTO   267
....................  /**   
.................... \file main.c  
.................... \brief 		Fichier unique de la carte V-T°-P NMEA183 PIC12F675  
....................   
.................... \date 	  	Novembre 2004  
.................... \version  	PIC12F675  
.................... \version  	Carte marine V-T°-P NMEA183 PIC12F675  
.................... \version    Compilateur C CCS  
.................... \version 	1.0  
.................... \author		David PROVENT, modifications Vincent AUBINEAU,  Exxotest, Annecy, Haute-Savoie, FRANCE.  
.................... \bug 		Pas de bogues connus pour le moment   
.................... */  
....................   
.................... #case  
....................   
.................... #include <12F675.h> 
....................  //////// Standard Header file for the PIC12F675 device ////////////////  
.................... #device PIC12F675  
.................... #list  
....................  
.................... #include "types.h" 
....................    
.................... #ifndef __TYPES_H__  
.................... #define __TYPES_H__  
....................   
.................... #undef VOID  
.................... #undef BOOL  
.................... #undef BYTE  
.................... #undef WORD  
.................... #undef DWORD  
.................... #undef CHAR  
.................... #undef SHORT  
.................... #undef LONG  
.................... #undef FLOAT  
....................   
.................... #define VOID	void  
.................... #define BOOL	int1  
....................   
.................... #define BYTE	unsigned int8  
.................... #define WORD	unsigned int16  
.................... #define DWORD	unsigned int32  
....................   
.................... #define CHAR	signed int8  
.................... #define SHORT	signed int16  
.................... #define LONG	signed int32  
....................   
.................... #define FLOAT	float  
....................   
....................   
.................... #endif // __TYPES_H__  
....................  
....................   
.................... #device ADC=10  
.................... #fuses NOCPD, NOPROTECT  
.................... #fuses NOWDT, NOPUT, BROWNOUT  
.................... #fuses NOMCLR	// RESET  
.................... #fuses INTRC_IO	// Horloge  
.................... #use delay(clock=4000000)  
*
01FA:  MOVLW  3C
01FB:  MOVWF  04
01FC:  MOVF   00,W
01FD:  BTFSC  03.2
01FE:  GOTO   20E
01FF:  MOVLW  01
0200:  MOVWF  21
0201:  CLRF   20
0202:  DECFSZ 20,F
0203:  GOTO   202
0204:  DECFSZ 21,F
0205:  GOTO   201
0206:  MOVLW  4A
0207:  MOVWF  20
0208:  DECFSZ 20,F
0209:  GOTO   208
020A:  NOP
020B:  NOP
020C:  DECFSZ 00,F
020D:  GOTO   1FF
020E:  RETLW  00
.................... #use fast_io(A)  
....................   
....................   
.................... // I/O pins  
.................... #define MES_TEMP	PIN_A1    
.................... #define MES_SPEED	PIN_A2  
.................... #define NMEA		PIN_A4  
.................... #define LED			PIN_A5  
....................   
.................... // Constante en FLASH  
.................... const CHAR strTempStart[]	= "$IIMTW,";  
.................... const CHAR strTempEnd[]		= ",C\r\n";  
.................... const CHAR strSpeedStart[]	= "$IIVHW,,,,,";  
.................... const CHAR strSpeedEnd[]	= ",N,,\r\n";  
....................   
.................... #define AN_VALUE_TMP_MAX	223 ///< 40°C  
.................... #define AN_VALUE_TMP_MIN	683 ///< -7°C  
.................... #define VALUE_TMP_MAX	    40  ///< 40°C  
.................... #define VALUE_TMP_MIN	    (-7)  ///< -7°C  
....................   
.................... #define NUM_TMP		7  
.................... const WORD pwTemp[NUM_TMP] = { AN_VALUE_TMP_MIN, 640, 595, 539, 465, 366, AN_VALUE_TMP_MAX }; ///< Températures en °C, -7, 1, 5, 10, 16, 25, 40      
.................... const CHAR pcTemp[NUM_TMP] = { VALUE_TMP_MIN, 1, 5, 10, 16, 25, VALUE_TMP_MAX }; ///< Températures en °C, -7, 1, 5, 10, 16, 25, 40  
.................... const WORD pwDeltaTemp[NUM_TMP] = { 0, AN_VALUE_TMP_MIN-640, 640-595, 595-539, 539-465, 465-366, 366-AN_VALUE_TMP_MAX }; ///< Delta de températures  
.................... const CHAR pcDeltaTemp[NUM_TMP] = { 0, 1-VALUE_TMP_MIN, 5-1, 10-5, 16-10, 25-16, VALUE_TMP_MAX-25 }; ///< Delta de températures  
....................   
.................... CHAR cTemp;  
.................... WORD wTemp;  
.................... BOOL SpeedNull;  
.................... BOOL SpeedValid;  
.................... BOOL UpdateSpeed;  
.................... BOOL SpeedChange;  
.................... WORD wSpeed;  
....................   
.................... typedef struct {  
.................... 	WORD wLow;  
.................... 	BYTE bHigh;  
.................... } ST_PERIODE;  
.................... ST_PERIODE stPeriode;  
....................   
.................... BYTE bPeriode[4];  
.................... #define PERIODE			(*((DWORD*)bPeriode))   ///< Periode sur 32 bits  
.................... #define PERIODE_L		(*((WORD*)bPeriode))	///< Partie basse de la periode  
.................... #define PERIODE_H		(bPeriode[2])			///< Partie haute de la periode  
.................... #define PERIODE_N		(bPeriode[3])			///< Non utilisé, doit être à 0  
....................   
....................   
.................... VOID main( VOID )  
.................... {  
*
0267:  CLRF   04
0268:  MOVLW  1F
0269:  ANDWF  03,F
026A:  BSF    03.5
026B:  MOVF   1F,W
026C:  ANDLW  F0
026D:  MOVWF  1F
026E:  BCF    03.5
026F:  BCF    1F.6
0270:  MOVLW  07
0271:  MOVWF  1F
0272:  BSF    05.4
.................... 	BYTE i;  
....................   
.................... 	// Setup I/O PORTS  
.................... 	set_tris_a( 0b11001111 ); // 0 output, 1 input  
0273:  MOVLW  CF
0274:  TRIS   5
.................... 	ext_int_edge( L_TO_H ); // INT0 edge  
0275:  BSF    03.5
0276:  BSF    01.6
....................   
.................... 	// Setup Timer  
.................... 	setup_timer_1( T1_INTERNAL | T1_DIV_BY_1 );  
0277:  MOVLW  85
0278:  BCF    03.5
0279:  MOVWF  10
.................... 	set_timer1( 0 );  
027A:  CLRF   0F
027B:  CLRF   0E
.................... 	  
.................... 	// Setup ADC  
.................... 	setup_adc_ports( AN1_ANALOG ); // A1 (Analog)  
027C:  BSF    03.5
027D:  MOVF   1F,W
027E:  ANDLW  F0
027F:  IORLW  02
0280:  MOVWF  1F
0281:  BCF    03.5
0282:  BCF    1F.6
.................... 	setup_adc( ADC_CLOCK_INTERNAL );  
0283:  BSF    03.5
0284:  MOVF   1F,W
0285:  ANDLW  0F
0286:  IORLW  30
0287:  MOVWF  1F
0288:  BCF    03.5
0289:  MOVF   1F,W
028A:  ANDLW  CC
028B:  IORLW  81
028C:  MOVWF  1F
.................... 	set_adc_channel(1);  
028D:  MOVLW  04
028E:  MOVWF  21
028F:  MOVF   1F,W
0290:  ANDLW  C3
0291:  IORWF  21,W
0292:  MOVWF  1F
.................... 	delay_us(10);  
0293:  MOVLW  03
0294:  MOVWF  20
0295:  DECFSZ 20,F
0296:  GOTO   295
....................   
.................... 	// Setup RS232  
.................... 	#use rs232( BAUD=4800, XMIT=NMEA, PARITY=N, BITS=8 )  
*
017F:  BCF    05.4
0180:  MOVLW  08
0181:  MOVWF  21
0182:  NOP
0183:  NOP
0184:  NOP
0185:  BSF    21.7
0186:  GOTO   196
0187:  BCF    21.7
0188:  RRF    40,F
0189:  BTFSC  03.0
018A:  BSF    05.4
018B:  BTFSS  03.0
018C:  BCF    05.4
018D:  BSF    21.6
018E:  GOTO   196
018F:  BCF    21.6
0190:  DECFSZ 21,F
0191:  GOTO   188
0192:  NOP
0193:  NOP
0194:  NOP
0195:  BSF    05.4
0196:  MOVLW  3E
0197:  MOVWF  04
0198:  DECFSZ 04,F
0199:  GOTO   198
019A:  NOP
019B:  NOP
019C:  BTFSC  21.7
019D:  GOTO   187
019E:  BTFSC  21.6
019F:  GOTO   18F
01A0:  RETLW  00
....................   
.................... 	enable_interrupts( INT_TIMER1 );        
*
0297:  BSF    03.5
0298:  BSF    0C.0
.................... 	enable_interrupts( INT_EXT );  
0299:  BCF    03.5
029A:  BSF    0B.4
.................... 	enable_interrupts( GLOBAL );  
029B:  MOVLW  C0
029C:  IORWF  0B,F
....................   
.................... 	// Init variable  
.................... 	stPeriode.wLow  = 0;  
029D:  CLRF   35
029E:  CLRF   34
.................... 	stPeriode.bHigh	= 0;  
029F:  CLRF   36
.................... 	SpeedNull		= TRUE;  
02A0:  BSF    31.0
.................... 	SpeedValid		= FALSE;  
02A1:  BCF    31.1
.................... 	UpdateSpeed		= FALSE;  
02A2:  BCF    31.2
.................... 	SpeedChange		= TRUE;  
02A3:  BSF    31.3
.................... 	PERIODE_N		= 0;  
02A4:  CLRF   3A
.................... 	  
.................... 	output_high( LED );  
02A5:  BSF    05.5
.................... 	  
.................... 	for(;;)  
.................... 	{  
.................... 		///// TEMPERATURE  
.................... 		wTemp = read_adc();  
02A6:  BSF    1F.1
02A7:  BTFSC  1F.1
02A8:  GOTO   2A7
02A9:  BSF    03.5
02AA:  MOVF   1E,W
02AB:  BCF    03.5
02AC:  MOVWF  2F
02AD:  MOVF   1E,W
02AE:  MOVWF  30
.................... 		  
.................... 		//printf("$%LX*\n",wTemp);  
.................... 	    if( wTemp <= AN_VALUE_TMP_MAX )  
02AF:  MOVF   30,F
02B0:  BTFSS  03.2
02B1:  GOTO   2B9
02B2:  MOVF   2F,W
02B3:  SUBLW  DF
02B4:  BTFSS  03.0
02B5:  GOTO   2B9
.................... 		{  
.................... 			cTemp = VALUE_TMP_MAX;  
02B6:  MOVLW  28
02B7:  MOVWF  2E
.................... 		}  
.................... 		else   
02B8:  GOTO   337
.................... 		{  
....................     	  if( wTemp >= AN_VALUE_TMP_MIN )  
02B9:  MOVF   30,W
02BA:  SUBLW  01
02BB:  BTFSC  03.0
02BC:  GOTO   2C7
02BD:  XORLW  FF
02BE:  BTFSS  03.2
02BF:  GOTO   2C4
02C0:  MOVF   2F,W
02C1:  SUBLW  AA
02C2:  BTFSC  03.0
02C3:  GOTO   2C7
....................     	  {  
.................... 		    cTemp = VALUE_TMP_MIN;  
02C4:  MOVLW  F9
02C5:  MOVWF  2E
.................... 		  }  
.................... 		  else  
02C6:  GOTO   337
.................... 		  {  
.................... 			//i = NUM_TMP-1;  
.................... 			i = 1;  
02C7:  MOVLW  01
02C8:  MOVWF  3B
.................... 			while ( wTemp < pwTemp[i])  
.................... 			 i++;  
02C9:  BCF    03.0
02CA:  RLF    3B,W
02CB:  MOVWF  3C
02CC:  INCF   3C,W
02CD:  CALL   076
02CE:  MOVWF  23
02CF:  MOVF   3C,W
02D0:  CALL   076
02D1:  MOVWF  21
02D2:  MOVF   30,W
02D3:  SUBWF  23,W
02D4:  BTFSS  03.0
02D5:  GOTO   2DE
02D6:  BTFSS  03.2
02D7:  GOTO   2DC
02D8:  MOVF   21,W
02D9:  SUBWF  2F,W
02DA:  BTFSC  03.0
02DB:  GOTO   2DE
02DC:  INCF   3B,F
02DD:  GOTO   2C9
.................... 		    cTemp = ( ((pwTemp[i-1] - wTemp) * pcDeltaTemp[i]) / pwDeltaTemp[i] ) + pcTemp[i-1];			  
02DE:  MOVLW  01
02DF:  SUBWF  3B,W
02E0:  MOVWF  20
02E1:  BCF    03.0
02E2:  RLF    20,F
02E3:  MOVF   20,W
02E4:  MOVWF  3D
02E5:  INCF   20,W
02E6:  CALL   076
02E7:  MOVWF  23
02E8:  MOVF   3D,W
02E9:  CALL   076
02EA:  MOVWF  3E
02EB:  MOVF   23,W
02EC:  MOVWF  3F
02ED:  MOVF   2F,W
02EE:  SUBWF  3E,W
02EF:  MOVWF  40
02F0:  MOVF   23,W
02F1:  MOVWF  41
02F2:  MOVF   30,W
02F3:  BTFSS  03.0
02F4:  INCFSZ 30,W
02F5:  SUBWF  41,F
02F6:  MOVF   3B,W
02F7:  CALL   0A5
02F8:  MOVWF  21
02F9:  CLRF   23
02FA:  MOVF   21,W
02FB:  MOVWF  20
02FC:  BTFSC  21.7
02FD:  DECF   23,F
02FE:  MOVWF  42
02FF:  MOVF   23,W
0300:  MOVWF  43
0301:  MOVF   41,W
0302:  MOVWF  45
0303:  MOVF   40,W
0304:  MOVWF  44
0305:  MOVF   23,W
0306:  MOVWF  47
0307:  MOVF   42,W
0308:  MOVWF  46
0309:  GOTO   0E9
030A:  MOVF   22,W
030B:  MOVWF  42
030C:  MOVF   21,W
030D:  MOVWF  41
030E:  BCF    03.0
030F:  RLF    3B,W
0310:  MOVWF  43
0311:  INCF   43,W
0312:  CALL   093
0313:  MOVWF  23
0314:  MOVF   43,W
0315:  CALL   093
0316:  MOVWF  44
0317:  MOVF   23,W
0318:  MOVWF  45
0319:  MOVF   42,W
031A:  MOVWF  47
031B:  MOVF   41,W
031C:  MOVWF  46
031D:  MOVF   23,W
031E:  MOVWF  49
031F:  MOVF   44,W
0320:  MOVWF  48
0321:  GOTO   0FE
0322:  MOVF   22,W
0323:  MOVWF  43
0324:  MOVF   21,W
0325:  MOVWF  42
0326:  MOVLW  01
0327:  SUBWF  3B,W
0328:  CALL   088
0329:  MOVWF  21
032A:  CLRF   23
032B:  MOVF   21,W
032C:  MOVWF  20
032D:  BTFSC  21.7
032E:  DECF   23,F
032F:  ADDWF  42,W
0330:  MOVWF  21
0331:  BTFSC  03.0
0332:  INCF   23,F
0333:  MOVF   43,W
0334:  ADDWF  23,F
0335:  MOVF   21,W
0336:  MOVWF  2E
.................... 		  }  
.................... 		}  
....................   
.................... 		///// VITESSE  
.................... 		if( SpeedChange )  
0337:  BTFSS  31.3
0338:  GOTO   36D
.................... 		{  
.................... 			UpdateSpeed = TRUE;  
0339:  BSF    31.2
.................... 			if( !SpeedNull )  
033A:  BTFSC  31.0
033B:  GOTO   369
.................... 				wSpeed = 1724138/PERIODE;  
033C:  MOVLW  37
033D:  MOVWF  04
033E:  MOVF   00,W
033F:  MOVWF  20
0340:  INCF   04,F
0341:  MOVF   00,W
0342:  MOVWF  21
0343:  INCF   04,F
0344:  MOVF   00,W
0345:  MOVWF  22
0346:  INCF   04,F
0347:  MOVF   00,W
0348:  MOVWF  23
0349:  MOVWF  3F
034A:  MOVF   22,W
034B:  MOVWF  3E
034C:  MOVF   21,W
034D:  MOVWF  3D
034E:  MOVF   20,W
034F:  MOVWF  3C
0350:  MOVF   04,W
0351:  MOVWF  40
0352:  CLRF   44
0353:  MOVLW  1A
0354:  MOVWF  43
0355:  MOVLW  4E
0356:  MOVWF  42
0357:  MOVLW  EA
0358:  MOVWF  41
0359:  MOVF   3F,W
035A:  MOVWF  48
035B:  MOVF   22,W
035C:  MOVWF  47
035D:  MOVF   21,W
035E:  MOVWF  46
035F:  MOVF   20,W
0360:  MOVWF  45
0361:  GOTO   13D
0362:  MOVF   40,W
0363:  MOVWF  04
0364:  MOVF   21,W
0365:  MOVWF  33
0366:  MOVF   20,W
0367:  MOVWF  32
.................... 			else  
0368:  GOTO   36B
.................... 				wSpeed = 0;  
0369:  CLRF   33
036A:  CLRF   32
.................... 			SpeedChange = FALSE;  
036B:  BCF    31.3
.................... 			UpdateSpeed = FALSE;  
036C:  BCF    31.2
.................... 		}  
....................   
.................... 		// Temperature (Water temperature)  
.................... 		output_high( LED );  
036D:  BSF    05.5
.................... 		printf( strTempStart );  
036E:  CLRF   3C
036F:  MOVF   3C,W
0370:  CALL   046
0371:  INCF   3C,F
0372:  MOVWF  20
0373:  MOVWF  40
0374:  CALL   17F
0375:  MOVLW  07
0376:  SUBWF  3C,W
0377:  BTFSS  03.2
0378:  GOTO   36F
.................... 		printf( "%d", cTemp );  
0379:  MOVF   2E,W
037A:  MOVWF  3C
037B:  MOVLW  18
037C:  MOVWF  3D
037D:  GOTO   1B6
.................... 		printf( strTempEnd );  
037E:  CLRF   3C
037F:  MOVF   3C,W
0380:  CALL   052
0381:  INCF   3C,F
0382:  MOVWF  20
0383:  MOVWF  40
0384:  CALL   17F
0385:  MOVLW  04
0386:  SUBWF  3C,W
0387:  BTFSS  03.2
0388:  GOTO   37F
.................... 		output_low( LED );  
0389:  BCF    05.5
.................... 		delay_ms(250);  
038A:  MOVLW  FA
038B:  MOVWF  3C
038C:  CALL   1FA
....................   
.................... 		// Vitesse (Water speed)  
.................... 		output_high( LED );  
038D:  BSF    05.5
.................... 		printf( strSpeedStart );  
038E:  CLRF   3C
038F:  MOVF   3C,W
0390:  CALL   05B
0391:  INCF   3C,F
0392:  MOVWF  20
0393:  MOVWF  40
0394:  CALL   17F
0395:  MOVLW  0B
0396:  SUBWF  3C,W
0397:  BTFSS  03.2
0398:  GOTO   38F
.................... 		  
.................... 		printf( "%u.%u", (BYTE)(wSpeed/10), (BYTE)(wSpeed%10) );  
0399:  MOVF   33,W
039A:  MOVWF  3E
039B:  MOVF   32,W
039C:  MOVWF  3D
039D:  CLRF   40
039E:  MOVLW  0A
039F:  MOVWF  3F
03A0:  CALL   20F
03A1:  MOVF   21,W
03A2:  MOVWF  3C
03A3:  MOVF   33,W
03A4:  MOVWF  3E
03A5:  MOVF   32,W
03A6:  MOVWF  3D
03A7:  CLRF   40
03A8:  MOVLW  0A
03A9:  MOVWF  3F
03AA:  CALL   20F
03AB:  MOVF   20,W
03AC:  MOVWF  3D
03AD:  MOVF   3C,W
03AE:  MOVWF  3E
03AF:  MOVLW  18
03B0:  MOVWF  3F
03B1:  CALL   235
03B2:  MOVLW  2E
03B3:  MOVWF  40
03B4:  CALL   17F
03B5:  MOVF   3D,W
03B6:  MOVWF  3E
03B7:  MOVLW  18
03B8:  MOVWF  3F
03B9:  CALL   235
.................... 		printf( strSpeedEnd );  
03BA:  CLRF   3C
03BB:  MOVF   3C,W
03BC:  CALL   06B
03BD:  INCF   3C,F
03BE:  MOVWF  20
03BF:  MOVWF  40
03C0:  CALL   17F
03C1:  MOVLW  06
03C2:  SUBWF  3C,W
03C3:  BTFSS  03.2
03C4:  GOTO   3BB
.................... 		output_low( LED );  
03C5:  BCF    05.5
.................... 		delay_ms(250);  
03C6:  MOVLW  FA
03C7:  MOVWF  3C
03C8:  CALL   1FA
.................... 	}  
03C9:  GOTO   2A6
.................... }  
....................   
....................   
.................... //-----------------------------------------------------------------------------  
.................... // Nom : ISR_Ext()  
.................... // Desc: Lecture de la fréquence du capteur de vitesse  
.................... //-----------------------------------------------------------------------------  
.................... #int_ext  
.................... VOID ISR_Ext( VOID )  
03CA:  SLEEP
.................... {  
.................... 	stPeriode.wLow = get_timer1()-2;  
*
00B0:  MOVF   0F,W
00B1:  MOVWF  23
00B2:  MOVF   0E,W
00B3:  MOVWF  20
00B4:  MOVF   0F,W
00B5:  SUBWF  23,W
00B6:  BTFSS  03.2
00B7:  GOTO   0B0
00B8:  MOVF   20,W
00B9:  MOVWF  4E
00BA:  MOVF   23,W
00BB:  MOVWF  4F
00BC:  MOVLW  02
00BD:  SUBWF  4E,W
00BE:  MOVWF  34
00BF:  MOVF   4F,W
00C0:  MOVWF  35
00C1:  MOVLW  00
00C2:  BTFSS  03.0
00C3:  MOVLW  01
00C4:  SUBWF  35,F
.................... 	set_timer1( 0 );  
00C5:  CLRF   0F
00C6:  CLRF   0E
.................... 	  
.................... 	if( !UpdateSpeed )  
00C7:  BTFSC  31.2
00C8:  GOTO   0D9
.................... 	{  
.................... 		if( SpeedValid )  
00C9:  BTFSS  31.1
00CA:  GOTO   0D8
.................... 		{  
.................... 			SpeedNull = FALSE;  
00CB:  BCF    31.0
.................... 			PERIODE_L = stPeriode.wLow;  
00CC:  MOVLW  37
00CD:  MOVWF  04
00CE:  INCF   04,F
00CF:  MOVF   35,W
00D0:  MOVWF  00
00D1:  DECF   04,F
00D2:  MOVF   34,W
00D3:  MOVWF  00
.................... 			PERIODE_H = stPeriode.bHigh;  
00D4:  MOVF   36,W
00D5:  MOVWF  39
.................... 			  
.................... 			SpeedChange = TRUE;  
00D6:  BSF    31.3
.................... 		}  
.................... 		else  
00D7:  GOTO   0D9
.................... 			SpeedValid = TRUE;  
00D8:  BSF    31.1
.................... 	}  
.................... 	  
.................... 	stPeriode.bHigh = 0;  
00D9:  CLRF   36
.................... }  
....................   
.................... //-----------------------------------------------------------------------------  
.................... // Nom : ISR_Timer1()  
.................... // Desc: Time out de la lecture de fréquence du capteur de vitesse  
.................... //-----------------------------------------------------------------------------  
00DA:  BCF    0B.1
00DB:  BCF    0A.3
00DC:  GOTO   02B
.................... #int_timer1  
.................... VOID ISR_Timer1( VOID )  
.................... {  
.................... 	if( stPeriode.bHigh >= 64 )  
00DD:  MOVF   36,W
00DE:  SUBLW  3F
00DF:  BTFSC  03.0
00E0:  GOTO   0E5
.................... 	{  
.................... 		SpeedNull  = TRUE;  
00E1:  BSF    31.0
.................... 		SpeedValid = FALSE;  
00E2:  BCF    31.1
.................... 		  
.................... 		SpeedChange = TRUE;  
00E3:  BSF    31.3
.................... 	}  
.................... 	else  
00E4:  GOTO   0E6
.................... 		stPeriode.bHigh++;  
00E5:  INCF   36,F
.................... }  
....................   
....................  
00E6:  BCF    0C.0
00E7:  BCF    0A.3
00E8:  GOTO   02B

Configuration Fuses:
   Word  1: 39D4   NOWDT NOCPD NOPROTECT NOMCLR NOPUT INTRC_IO BROWNOUT
